// Generated by CoffeeScript 1.3.3
var Frag, FragInstance, bob, body, joe, new_font, view, _, _extend,
  __slice = [].slice;

_ = function() {
  var args, fn;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  fn = function() {
    var args, result;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    args = Array.prototype.slice.call(args);
    console.log(args);
    _.old = fn;
    result = new _(args);
    result.__setup(args);
    return result;
  };
  fn.prototype = fn.__proto__ = _.prototype;
  fn.attach_to = fn.prototype.attach_to;
  fn.nombre = 'fn';
  fn.__inherit_props(_.old);
  if (!fn.__root) {
    fn.__root = document.createDocumentFragment();
    fn.__root.__namespace = {};
    fn.__scope = fn.__root;
  }
  _.old = false;
  /*
  	fn.valueOf = ()->
  		if @__scope
  			return @__scope.valueOf()
  		else
  			return @
  	fn.toString = ()->
  		if @__scope
  			return @__scope.toString()
  		else
  			return @
  */

  return fn;
};

_.prototype = {
  old: false,
  constructor: function() {
    return this;
  },
  nombre: "prototype",
  __return_proxy: function(master) {
    var proxy;
    proxy = function() {
      var args, fn;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      fn = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return new proxy(args);
      };
      fn.master = master;
      fn.__root = master.__scope;
      return fn;
    };
    return proxy();
  },
  __set_scope: function(scope) {
    console.log("setting scope: ", scope);
    return this.__scope = scope;
  },
  __scope_to_namespace: function(scope) {
    var i, part, target;
    console.log("__scope_to_namespace", scope);
    target = this.__namespace;
    i = 0;
    while (i < scope.length) {
      part = scope[i];
      if (typeof part === 'number') {
        if (target.__children) {
          target = target.__children[part];
        }
      } else if (target[part]) {
        target = target[part];
      } else {
        return undefined;
      }
      i++;
    }
    console.log(target);
    return target;
  },
  __add_symbol: function(scope, symbol, node) {
    console.log("add_symbol: ", scope, symbol, node);
    if (scope != null) {
      if (!scope.__namespace) {
        scope.__namespace = {};
      }
    }
    scope.__namespace[symbol] = node;
    console.log("@:", console.dir(this), this.nombre);
    return this.__property(symbol, {
      get: function() {
        console.log("getter ", symbol, "()");
        if (!this.__scope.__namespace) {
          this.__scope.__namespace = {};
        }
        if (this.__scope.__namespace[symbol]) {
          this.__scope = this.__scope.__namespace[symbol];
        } else if (this.__root.__namespace[symbol]) {
          this.__scope = this.__root.__namespace[symbol];
        }
        return this.__scope;
      }
    });
  },
  __property: function(prop, desc) {
    this[prop] = "temp";
    console.log('__property', console.dir(this));
    try {
      return Object.defineProperty(this, prop, desc);
    } catch (error) {
      return console.log("cant define getter for ", prop);
    }
  },
  __register: function(node, el) {},
  __setup: function(args) {
    this.__note_args(args);
    this.__parse(this);
    return this.__construct_frag(this, this.__parsed, this.__root);
  },
  __report_props: function() {
    var key, result;
    result = {};
    for (key in this) {
      if (this.hasOwnProperty(key)) {
        result[key] = this[key];
      }
    }
    return console.log(this.nombre, result);
  },
  __inherit_props: function(ancestor) {
    var key, _results;
    if (ancestor) {
      _results = [];
      for (key in ancestor) {
        console.log('inherit key: ', key);
        _results.push(this[key] = ancestor[key]);
      }
      return _results;
    }
  },
  __note_args: function(args) {
    this.__args = Array.prototype.slice.call(args);
    this.__template = this.__args[0];
    this.__args = this.__args.slice(1, this.__args.length + 1);
    return console.log("__args:", this.__args);
  },
  attach_to: function(el) {
    return el.appendChild(this.__scope);
  },
  __resolve_symbol: function(token) {
    if (typeof token === "string") {
      return token;
    }
    if (token.type === "symbol") {
      return token.value;
    }
    if (token.type === "text") {
      return token.value;
    }
    if (token.type === "arg") {
      if (this.__args[parseInt(token.value) - 1]) {
        return this.__args[parseInt(token.value) - 1];
      }
    }
  },
  __construct_frag: function(me, obj, h) {
    var b, c, el, f, head, hh, i, key, line, tag, text, token, total, v, _i, _j, _len, _len1, _ref, _results, _results1;
    head = h;
    token = obj;
    if (token instanceof Array) {
      _results = [];
      for (_i = 0, _len = token.length; _i < _len; _i++) {
        line = token[_i];
        _results.push(me.__construct_frag(me, line, h));
      }
      return _results;
    } else if (token.type === "assign") {
      f = document.createDocumentFragment();
      me.__construct_frag(me, token.right, f);
      me.__add_symbol(me.__root, me.__resolve_symbol(token.left), f);
      return head;
    } else if (token.type === "statement") {
      hh = me.__root;
      me.__construct_frag(me, token.value, hh);
      return hh;
    } else if (token.type === "chain") {
      me.__construct_frag(me, token.value, head);
      return head;
    } else if (token.type === "arg") {
      if (this.__args[parseInt(token.value) - 1]) {
        text = document.createTextNode(this.__args[parseInt(token.value) - 1]);
        head.appendChild(text);
      }
      return head;
    } else if (token.type === "text") {
      text = document.createTextNode(token.value);
      head.appendChild(text);
      return head;
    } else if (token.type === "element") {
      tag = me.__resolve_symbol(token.tag);
      if (this.__root.__namespace[tag]) {
        el = this.__root.__namespace[tag].cloneNode(true);
      } else {
        el = document.createElement(tag);
        if (token.id) {
          el.id = me.__resolve_symbol(token.id);
        }
        if (token.classes) {
          total = [];
          _ref = token.classes;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            c = _ref[_j];
            total.push(me.__resolve_symbol(c));
          }
          el.className = total.join(" ");
        }
        if (token.json) {
          for (key in token.json) {
            v = me.__resolve_symbol(token.json[key]);
            el.setAttribute(key, v);
          }
        }
        if (token.label) {
          console.log('label: ', token.label);
          this.__add_symbol(head, me.__resolve_symbol(token.label), el);
        }
      }
      head.appendChild(el);
      return el;
    } else if (typeof obj === "object" && obj.length > 0) {
      hh = head;
      i = 0;
      _results1 = [];
      while (i < obj.length) {
        token = obj[i];
        b = me.__construct_frag(me, token, hh);
        hh = b;
        _results1.push(i++);
      }
      return _results1;
    }
  },
  __parse: function(me) {
    var arg, c, i, key, regex, set, template;
    console.log("parse!");
    template = me.__template;
    i = 0;
    while (i < this.__args.length) {
      regex = new RegExp("%" + (i + 1), "gi");
      arg = this.__args[i];
      if (typeof arg === "string") {
        arg = "\"" + arg + "\"";
      } else if (arg instanceof Array) {
        arg = arg.join(", ");
        if (arg.length > 1) {
          arg = "[" + arg + "]";
        }
      } else if (typeof arg === "object") {
        set = [];
        c = 0;
        for (key in arg) {
          c += 1;
          set.push(key);
        }
        arg = set.join(", ");
        if (set.length > 1) {
          arg = "[" + arg + "]";
        }
      }
      template = template.replace(regex, arg);
      i++;
    }
    me.__parsed = window.peg.parse(template);
    console.log(template);
    return console.log(me.__parsed);
  }
};

body = document.getElementsByTagName("body")[0];

/*
links = [
	title: "Rolling Your Own"
	file: "roll_your_own"
,
	title: "PongScript"
	file: "pongscript"
,
	title: "Hello World"
	file: "hello"
]
links = links.map((part) ->
	icon = "./img/icon1.png"
	"li/a{href:'./posts/" + part.file + ".html'}/[ img{src:'" + icon + "'}, span.name/'" + part.title + "']"
)
console.log links
view = new _("div/div")
view.nombre = "Joseph Parker"
view = view("div:main#%1/h1/'Hello..'", {wrapper:0})
view = view("thing = div/p")

#view = view("pagelink = li/a#%1{href:'./blog.html'}/[ img{src:%2}, span:text.name/'link']", {symbolic:0}, "./img/icon1.png");
view = view("pagelist = ul:pagelist#pages/%1", links)
view = view("sidebar = div:sidebar#sidebar/[div:logo.logo,  pagelist]")
view = view("post=[h1/'Rolling your own html templates', h3.author/['Author: ', %2], code.date/['Date:', %1], p/ \"After a year of developing a single page web app with only jQuery, I'm hyper aware of the pain points that come with vanilla js/html/css interaction.  I'd put off investigating the popular MVC frameworks, but after looking them over I decided to write my own components to ease the workflow. \", p.right/%3/['- ', %2] ]", "Sun Aug 04 2013", view.nombre,
	i: 0
)
view = view("div:main#wrapper/[sidebar, div:blog#blog/post]")

body.appendChild view.__root
*/


_extend = function(obj, parent) {
  var key, _results;
  _results = [];
  for (key in parent) {
    if (parent.hasOwnProperty(key)) {
      _results.push(obj[key] = parent[key]);
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

FragInstance = (function() {

  function FragInstance() {}

  FragInstance.prototype.sources = [];

  FragInstance.prototype.operate = function(source) {
    return this.sources.push(source);
  };

  return FragInstance;

})();

Frag = function(source, instance) {
  if (instance == null) {
    instance = false;
  }
  if (!instance) {
    instance = function(source) {
      return Frag(source, instance);
    };
    _extend(instance, FragInstance.prototype);
  } else {
    console.log('frag was passed an instance');
  }
  instance.operate(source);
  console.log(instance.sources);
  return instance;
};

joe = new Frag('one');

bob = joe('two');

new_font = "new_font = div.new_font\n	label.name\n		\"family name\"\n		input:family.name\n	label.name\n		\"script url\"\n		textarea:script.script\n	button:done.float_right {disabled:true}/\"done\"\n	button:cancel.float_right/\"cancel\"\n	hr ";

view = new _("div");

view = view(new_font);

body.appendChild(view.__root);
